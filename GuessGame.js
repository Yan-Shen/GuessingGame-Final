// Before we start making the actual game interface, we're going to need a game instance to work with. 
// After the DOM has finished loading, create a new game instance.
// When a user presses the submit button, extract the value from the input, #player-input.
// After the player has submitted their guess, clear the input element.
// Pass the submitted value into playersGuessSubmission, and console.log the output. Note: The value extracted from input elements will always be a string.
// Extra: When a user presses the 'enter' key, repeat steps 2, 3, and 4. You'll probably be duplicating a lot of code here, so figure out how to be as DRY (Don't repeat yourself) as possible.

// If the player's guess is a duplicate, change the h1 #title tag and tell them to guess again.
// If the player's guess isn't a duplicate, add the guess to the #guesses 'ul' element so the user can see what guesses they have already submitted.
// If the player wins or loses, change the h1 #title tag to reflect that they've lost the game. Use the h2 #subtitle to tell them to click the Reset button.
// If the player wins or loses, 'disable' the #submit and #hint buttons. Hint: disable can be added as an attribute on an HTML tag. jQuery has some convenient functions that we can use to add or remove the 'disable' attribute.
// Otherwise, use a combination of the output of the submitPlayersGuess and lower functions to craft a message telling the user how hot or cold they are, and if they should guess higher or lower.

// When the 'reset' button is pressed, create a new game instance. 
    // Reset the #title and #subtitle, and .guess list elements to their default values. 
    // You'll also need to make sure that your #submit and #hint buttons aren't disabled.
// When the 'hint' button is pressed, use #title to show the three list options generated by your provideHint function.

$(document).ready(function(){
    var game = new Game();
    $('#submit').click(function(e){
        e.preventDefault();
        guess(game);
    })

    $('#player-input').keypress(function(e){
        if(e.which ==13) {
            e.preventDefault();
            guess(game);
            $('#submit, #hint').attr('disabled',false);
        }      
    })

    $('#reset').click(function(){
        game = newGame();
        location.reload();
    })

    $('#hint').click(function(){
        $('#main-title').text('the winning number is among '+game.provideHint());
        $('#hint').attr('disabled', true);
    })
})

function guess(game){
    var playerInput = $('#player-input').val();
    $('#player-input').val('');
    console.log(playerInput)
    var feedback= game.playersGuessSubmission(+playerInput);
    $('#main-title').text(feedback);
}

function Game () {
    this.playersGuess = null;
    this.winningNumber = generateWinningNumber();
    this.pastGuesses = [];
}

function generateWinningNumber() {
    return Math.ceil(Math.random()*100);
}


function newGame() {
    return new Game();
}

Game.prototype.difference = function() {
    return Math.abs(this.playersGuess-this.winningNumber);
}

Game.prototype.isLower = function() {
    return this.playersGuess < this.winningNumber;
}

Game.prototype.playersGuessSubmission = function(guess) {
    if(typeof guess !== 'number' || guess < 1 || guess > 100) {
        return "That is an invalid guess.";
    }
    this.playersGuess = guess;
    return this.checkGuess();
}

Game.prototype.checkGuess = function() {
    if(this.playersGuess===this.winningNumber) {
        $('#sub-title').text('Please reset');
        $('#submit, #hint').attr('disabled',true);
        return 'You Win!'
    }
    else {
        if(this.pastGuesses.indexOf(this.playersGuess) > -1) {
            return 'You have already guessed that number.';
        }
        else {
            this.pastGuesses.push(this.playersGuess);
            $('.guess-list li:nth-child('+this.pastGuesses.length+')').text(this.playersGuess);
            if(this.pastGuesses.length >= 5) {
                $('#sub-title').text('Please reset');
                $('#submit, #hint').attr('disabled',true);
                return 'You Lose.';
            }
            else {  
                var direction;
                this.isLower() ? direction = 'too low' : direction = 'too high';
                $('#sub-title').text(direction);   
                var diff = this.difference();
                if(diff < 10) return'You\'re burning up!';
                else if(diff < 25) return'You\'re lukewarm.';
                else if(diff < 50) return'You\'re a bit chilly.';
                else return'You\'re ice cold!';
            }
        }
    }
}

Game.prototype.provideHint = function() {
    var hintArray = [this.winningNumber, generateWinningNumber(), generateWinningNumber()];
    return shuffle(hintArray);
}

function shuffle(arr) { //Fisher-Yates - https://bost.ocks.org/mike/shuffle/
   for(var i = arr.length-1; i > 0; i--) {
       var randomIndex = Math.floor(Math.random() * (i + 1));
       var temp = arr[i];
       arr[i] = arr[randomIndex];
       arr[randomIndex] = temp;
    }
    return arr;
}